{"ast":null,"code":"var _jsxFileName = \"D:\\\\WhatsappWebClone\\\\client\\\\src\\\\components\\\\Sidebar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Menu, Search } from 'lucide-react';\nimport AddContactModal from './AddContactModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  conversations,\n  selectedConversation,\n  onConversationSelect,\n  loading,\n  sidebarOpen,\n  onToggleSidebar\n}) => {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [contacts, setContacts] = useState([]);\n  const [contactsLoading, setContactsLoading] = useState(true);\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\n\n  // Fetch contacts from database\n  const fetchContacts = async () => {\n    try {\n      setContactsLoading(true);\n      const response = await fetch('/api/contacts');\n      if (response.ok) {\n        const data = await response.json();\n        setContacts(data);\n      } else {\n        console.error('Failed to fetch contacts');\n      }\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n    } finally {\n      setContactsLoading(false);\n    }\n  };\n\n  // Fetch contacts on component mount\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  // Expose refresh function globally for other components to use\n  useEffect(() => {\n    window.refreshContacts = fetchContacts;\n\n    // Cleanup function to remove the global reference\n    return () => {\n      delete window.refreshContacts;\n    };\n  }, []);\n\n  // Smart refresh contacts only when needed\n  useEffect(() => {\n    let lastRefreshTime = Date.now();\n    let lastMessageCount = 0;\n    const interval = setInterval(async () => {\n      try {\n        // Only refresh if we haven't refreshed in the last 30 seconds\n        const now = Date.now();\n        if (now - lastRefreshTime >= 30000) {\n          const response = await fetch('/api/contacts');\n          if (response.ok) {\n            const newContacts = await response.json();\n\n            // Calculate total message count to detect changes\n            const newMessageCount = newContacts.reduce((total, contact) => {\n              return total + (contact.unreadCount || 0);\n            }, 0);\n\n            // Check if there are actual changes (new messages, different timestamps, etc.)\n            const hasChanges = newMessageCount !== lastMessageCount || newContacts.some((contact, index) => {\n              const oldContact = contacts[index];\n              return !oldContact || contact.lastMessageTime !== oldContact.lastMessageTime || contact.unreadCount !== oldContact.unreadCount;\n            });\n            if (hasChanges) {\n              console.log('ðŸ”„ Contacts updated - changes detected');\n              setContacts(newContacts);\n              lastMessageCount = newMessageCount;\n            }\n            lastRefreshTime = now;\n          }\n        }\n      } catch (error) {\n        console.error('Error during smart refresh:', error);\n      }\n    }, 30000); // Check every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [contacts]);\n\n  // Combine contacts with fetched conversations and sort by message activity\n  const allConversations = useMemo(() => {\n    const combined = [...contacts];\n    // Add fetched conversations if they exist and don't duplicate\n    conversations.forEach(conv => {\n      if (!combined.find(c => c.wa_id === conv.wa_id)) {\n        combined.push(conv);\n      }\n    });\n\n    // Sort by message activity (most recent message first)\n    return combined.sort((a, b) => {\n      const messageTimeA = a.lastMessageTime ? new Date(a.lastMessageTime).getTime() : 0;\n      const messageTimeB = b.lastMessageTime ? new Date(b.lastMessageTime).getTime() : 0;\n\n      // If both have messages, sort by message time\n      if (messageTimeA > 0 && messageTimeB > 0) {\n        return messageTimeB - messageTimeA; // Most recent first\n      }\n\n      // If only one has messages, prioritize the one with messages\n      if (messageTimeA > 0 && messageTimeB === 0) return -1;\n      if (messageTimeA === 0 && messageTimeB > 0) return 1;\n\n      // If neither has messages, sort by creation time\n      const createdAtA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const createdAtB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return createdAtB - createdAtA;\n    });\n  }, [contacts, conversations]);\n\n  // Filter conversations based on search query\n  const filteredConversations = useMemo(() => {\n    if (!searchQuery.trim()) return allConversations;\n    return allConversations.filter(conversation => conversation.name.toLowerCase().includes(searchQuery.toLowerCase()) || conversation.lastMessage && conversation.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [allConversations, searchQuery]);\n  const formatTime = timestamp => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp);\n    return formatDistanceToNow(date, {\n      addSuffix: true\n    });\n  };\n  const getInitials = name => {\n    if (!name) return '?';\n    return name.split(' ').map(word => word.charAt(0)).join('').toUpperCase().slice(0, 2);\n  };\n  const handleAddContact = () => {\n    setIsAddContactModalOpen(true);\n  };\n  const handleContactAdded = newContact => {\n    // Add new contact - it will be sorted by the useMemo logic\n    setContacts(prev => [newContact, ...prev]);\n  };\n  const handleRefreshContacts = () => {\n    fetchContacts();\n  };\n  if (loading || contactsLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sidebar ${sidebarOpen ? 'open' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sidebar ${sidebarOpen ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WhatsApp Web\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"refresh-button\",\n          onClick: handleRefreshContacts,\n          title: \"Refresh contacts\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u21BB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-chat-button\",\n          onClick: handleAddContact,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          size: 18,\n          className: \"search-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search or start new chat\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversations-list\",\n      children: filteredConversations.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: searchQuery ? 'No results found' : 'No conversations yet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: searchQuery ? 'Try a different search term' : 'Start chatting to see your conversations here'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this) : filteredConversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `conversation-item ${(selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id) === conversation._id ? 'active' : ''}`,\n        onClick: () => onConversationSelect(conversation),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar\",\n          children: getInitials(conversation.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-name\",\n            children: conversation.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-last-message\",\n            children: conversation.lastMessage || 'No messages yet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `conversation-status ${conversation.status === 'offline' ? 'offline' : ''}`,\n            children: conversation.status === 'online' ? 'online' : conversation.status === 'last seen' && conversation.lastSeen ? `last seen ${formatDistanceToNow(new Date(conversation.lastSeen), {\n              addSuffix: true\n            })}` : 'offline'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-time\",\n          children: formatTime(conversation.lastMessageTime || conversation.createdAt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this), conversation.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unread-badge\",\n          children: conversation.unreadCount > 9 ? '9+' : conversation.unreadCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }, this)]\n      }, conversation._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContactModal, {\n      isOpen: isAddContactModalOpen,\n      onClose: () => setIsAddContactModalOpen(false),\n      onContactAdded: handleContactAdded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"3tGTVLI14iE0pp1qfniZe+64am8=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","formatDistanceToNow","Menu","Search","AddContactModal","jsxDEV","_jsxDEV","Sidebar","conversations","selectedConversation","onConversationSelect","loading","sidebarOpen","onToggleSidebar","_s","searchQuery","setSearchQuery","contacts","setContacts","contactsLoading","setContactsLoading","isAddContactModalOpen","setIsAddContactModalOpen","fetchContacts","response","fetch","ok","data","json","console","error","window","refreshContacts","lastRefreshTime","Date","now","lastMessageCount","interval","setInterval","newContacts","newMessageCount","reduce","total","contact","unreadCount","hasChanges","some","index","oldContact","lastMessageTime","log","clearInterval","allConversations","combined","forEach","conv","find","c","wa_id","push","sort","a","b","messageTimeA","getTime","messageTimeB","createdAtA","createdAt","createdAtB","filteredConversations","trim","filter","conversation","name","toLowerCase","includes","lastMessage","formatTime","timestamp","date","addSuffix","getInitials","split","map","word","charAt","join","toUpperCase","slice","handleAddContact","handleContactAdded","newContact","prev","handleRefreshContacts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","size","type","placeholder","value","onChange","e","target","length","_id","status","lastSeen","isOpen","onClose","onContactAdded","_c","$RefreshReg$"],"sources":["D:/WhatsappWebClone/client/src/components/Sidebar.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { Menu, Search } from 'lucide-react';\r\nimport AddContactModal from './AddContactModal';\r\n\r\nconst Sidebar = ({ \r\n  conversations, \r\n  selectedConversation, \r\n  onConversationSelect, \r\n  loading, \r\n  sidebarOpen, \r\n  onToggleSidebar \r\n}) => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [contacts, setContacts] = useState([]);\r\n  const [contactsLoading, setContactsLoading] = useState(true);\r\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\r\n\r\n  // Fetch contacts from database\r\n  const fetchContacts = async () => {\r\n    try {\r\n      setContactsLoading(true);\r\n      const response = await fetch('/api/contacts');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setContacts(data);\r\n      } else {\r\n        console.error('Failed to fetch contacts');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n    } finally {\r\n      setContactsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch contacts on component mount\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  // Expose refresh function globally for other components to use\r\n  useEffect(() => {\r\n    window.refreshContacts = fetchContacts;\r\n    \r\n    // Cleanup function to remove the global reference\r\n    return () => {\r\n      delete window.refreshContacts;\r\n    };\r\n  }, []);\r\n\r\n  // Smart refresh contacts only when needed\r\n  useEffect(() => {\r\n    let lastRefreshTime = Date.now();\r\n    let lastMessageCount = 0;\r\n    \r\n    const interval = setInterval(async () => {\r\n      try {\r\n        // Only refresh if we haven't refreshed in the last 30 seconds\r\n        const now = Date.now();\r\n        if (now - lastRefreshTime >= 30000) {\r\n          const response = await fetch('/api/contacts');\r\n          if (response.ok) {\r\n            const newContacts = await response.json();\r\n            \r\n            // Calculate total message count to detect changes\r\n            const newMessageCount = newContacts.reduce((total, contact) => {\r\n              return total + (contact.unreadCount || 0);\r\n            }, 0);\r\n            \r\n            // Check if there are actual changes (new messages, different timestamps, etc.)\r\n            const hasChanges = newMessageCount !== lastMessageCount || \r\n              newContacts.some((contact, index) => {\r\n                const oldContact = contacts[index];\r\n                return !oldContact || \r\n                       contact.lastMessageTime !== oldContact.lastMessageTime ||\r\n                       contact.unreadCount !== oldContact.unreadCount;\r\n              });\r\n            \r\n            if (hasChanges) {\r\n              console.log('ðŸ”„ Contacts updated - changes detected');\r\n              setContacts(newContacts);\r\n              lastMessageCount = newMessageCount;\r\n            }\r\n            \r\n            lastRefreshTime = now;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during smart refresh:', error);\r\n      }\r\n    }, 30000); // Check every 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [contacts]);\r\n\r\n  // Combine contacts with fetched conversations and sort by message activity\r\n  const allConversations = useMemo(() => {\r\n    const combined = [...contacts];\r\n    // Add fetched conversations if they exist and don't duplicate\r\n    conversations.forEach(conv => {\r\n      if (!combined.find(c => c.wa_id === conv.wa_id)) {\r\n        combined.push(conv);\r\n      }\r\n    });\r\n    \r\n    // Sort by message activity (most recent message first)\r\n    return combined.sort((a, b) => {\r\n      const messageTimeA = a.lastMessageTime ? new Date(a.lastMessageTime).getTime() : 0;\r\n      const messageTimeB = b.lastMessageTime ? new Date(b.lastMessageTime).getTime() : 0;\r\n      \r\n      // If both have messages, sort by message time\r\n      if (messageTimeA > 0 && messageTimeB > 0) {\r\n        return messageTimeB - messageTimeA; // Most recent first\r\n      }\r\n      \r\n      // If only one has messages, prioritize the one with messages\r\n      if (messageTimeA > 0 && messageTimeB === 0) return -1;\r\n      if (messageTimeA === 0 && messageTimeB > 0) return 1;\r\n      \r\n      // If neither has messages, sort by creation time\r\n      const createdAtA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\r\n      const createdAtB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\r\n      return createdAtB - createdAtA;\r\n    });\r\n  }, [contacts, conversations]);\r\n\r\n  // Filter conversations based on search query\r\n  const filteredConversations = useMemo(() => {\r\n    if (!searchQuery.trim()) return allConversations;\r\n    return allConversations.filter(conversation =>\r\n      conversation.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      (conversation.lastMessage && conversation.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()))\r\n    );\r\n  }, [allConversations, searchQuery]);\r\n  const formatTime = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    const date = new Date(timestamp);\r\n    return formatDistanceToNow(date, { addSuffix: true });\r\n  };\r\n\r\n  const getInitials = (name) => {\r\n    if (!name) return '?';\r\n    return name\r\n      .split(' ')\r\n      .map(word => word.charAt(0))\r\n      .join('')\r\n      .toUpperCase()\r\n      .slice(0, 2);\r\n  };\r\n\r\n  const handleAddContact = () => {\r\n    setIsAddContactModalOpen(true);\r\n  };\r\n\r\n  const handleContactAdded = (newContact) => {\r\n    // Add new contact - it will be sorted by the useMemo logic\r\n    setContacts(prev => [newContact, ...prev]);\r\n  };\r\n\r\n  const handleRefreshContacts = () => {\r\n    fetchContacts();\r\n  };\r\n\r\n  if (loading || contactsLoading) {\r\n    return (\r\n      <div className={`sidebar ${sidebarOpen ? 'open' : ''}`}>\r\n        <div className=\"loading-spinner\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`sidebar ${sidebarOpen ? 'open' : ''}`}>\r\n      <div className=\"sidebar-header\">\r\n        <h1>WhatsApp Web</h1>\r\n        <div className=\"header-buttons\">\r\n          <button className=\"refresh-button\" onClick={handleRefreshContacts} title=\"Refresh contacts\">\r\n            <span>â†»</span>\r\n          </button>\r\n          <button className=\"new-chat-button\" onClick={handleAddContact}>\r\n            <span>+</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Search Box */}\r\n      <div className=\"search-container\">\r\n        <div className=\"search-box\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search or start new chat\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"conversations-list\">\r\n        {filteredConversations.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <h2>{searchQuery ? 'No results found' : 'No conversations yet'}</h2>\r\n            <p>{searchQuery ? 'Try a different search term' : 'Start chatting to see your conversations here'}</p>\r\n          </div>\r\n        ) : (\r\n          filteredConversations.map((conversation) => (\r\n            <div\r\n              key={conversation._id}\r\n              className={`conversation-item ${\r\n                selectedConversation?._id === conversation._id ? 'active' : ''\r\n              }`}\r\n              onClick={() => onConversationSelect(conversation)}\r\n            >\r\n              <div className=\"avatar\">\r\n                {getInitials(conversation.name)}\r\n              </div>\r\n              \r\n                             <div className=\"conversation-info\">\r\n                 <div className=\"conversation-name\">{conversation.name}</div>\r\n                 <div className=\"conversation-last-message\">\r\n                   {conversation.lastMessage || 'No messages yet'}\r\n                 </div>\r\n                 <div className={`conversation-status ${conversation.status === 'offline' ? 'offline' : ''}`}>\r\n                   {conversation.status === 'online' ? 'online' : \r\n                    conversation.status === 'last seen' && conversation.lastSeen ? \r\n                    `last seen ${formatDistanceToNow(new Date(conversation.lastSeen), { addSuffix: true })}` : \r\n                    'offline'}\r\n                 </div>\r\n               </div>\r\n              \r\n              <div className=\"conversation-time\">\r\n                {formatTime(conversation.lastMessageTime || conversation.createdAt)}\r\n              </div>\r\n              \r\n              {conversation.unreadCount > 0 && (\r\n                <div className=\"unread-badge\">\r\n                  {conversation.unreadCount > 9 ? '9+' : conversation.unreadCount}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      \r\n      <AddContactModal\r\n        isOpen={isAddContactModalOpen}\r\n        onClose={() => setIsAddContactModalOpen(false)}\r\n        onContactAdded={handleContactAdded}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}