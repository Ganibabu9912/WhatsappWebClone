{"ast":null,"code":"var _jsxFileName = \"D:\\\\WhatsappWebClone\\\\client\\\\src\\\\components\\\\Sidebar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Menu, Search } from 'lucide-react';\nimport AddContactModal from './AddContactModal';\nimport ContextMenu from './ContextMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  conversations,\n  selectedConversation,\n  onConversationSelect,\n  loading,\n  sidebarOpen,\n  onToggleSidebar\n}) => {\n  _s();\n  var _contextMenu$contact;\n  const [searchQuery, setSearchQuery] = useState('');\n  const [contacts, setContacts] = useState([]);\n  const [contactsLoading, setContactsLoading] = useState(true);\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [contextMenu, setContextMenu] = useState({\n    isVisible: false,\n    position: {\n      x: 0,\n      y: 0\n    },\n    contact: null\n  });\n\n  // Fetch contacts from database\n  const fetchContacts = async () => {\n    try {\n      setContactsLoading(true);\n      const response = await fetch('/api/contacts');\n      if (response.ok) {\n        const data = await response.json();\n        console.log('📱 Fetched contacts:', data);\n        setContacts(data);\n      } else {\n        console.error('Failed to fetch contacts');\n      }\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n    } finally {\n      setContactsLoading(false);\n    }\n  };\n\n  // Smart fetch contacts with loading state\n  const smartFetchContacts = async () => {\n    if (isRefreshing) return; // Prevent multiple simultaneous refreshes\n\n    try {\n      setIsRefreshing(true);\n      const response = await fetch('/api/contacts');\n      if (response.ok) {\n        const data = await response.json();\n        console.log('🔄 Contacts refreshed successfully:', data);\n        setContacts(data);\n      } else {\n        console.error('Failed to fetch contacts');\n      }\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Fetch contacts on component mount\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  // Expose refresh function globally for other components to use\n  useEffect(() => {\n    window.refreshContacts = smartFetchContacts;\n\n    // Cleanup function to remove the global reference\n    return () => {\n      delete window.refreshContacts;\n    };\n  }, []);\n\n  // No automatic polling - only refresh on events (message sent, manual refresh, initial load)\n\n  // Combine contacts with fetched conversations and sort by message activity\n  const allConversations = useMemo(() => {\n    console.log('🔄 Building allConversations:', {\n      contacts: contacts.length,\n      conversations: conversations.length\n    });\n\n    // Normalize contacts to ensure they have the correct structure\n    const normalizedContacts = contacts.map(contact => {\n      // If the contact has _id but no wa_id, use _id as wa_id\n      if (contact._id && !contact.wa_id) {\n        console.log('🔄 Normalizing contact:', contact.name, 'using _id as wa_id');\n        return {\n          ...contact,\n          wa_id: contact._id\n        };\n      }\n      return contact;\n    });\n    const combined = [...normalizedContacts];\n    // Add fetched conversations if they exist and don't duplicate\n    conversations.forEach(conv => {\n      if (!combined.find(c => c.wa_id === conv.wa_id)) {\n        combined.push(conv);\n      }\n    });\n    console.log('📱 Combined contacts:', combined.map(c => ({\n      name: c.name,\n      wa_id: c.wa_id,\n      hasWaId: !!c.wa_id\n    })));\n\n    // Sort by pinned status first, then by message activity\n    return combined.sort((a, b) => {\n      // Pinned chats first\n      if (a.isPinned && !b.isPinned) return -1;\n      if (!a.isPinned && b.isPinned) return 1;\n      const messageTimeA = a.lastMessageTime ? new Date(a.lastMessageTime).getTime() : 0;\n      const messageTimeB = b.lastMessageTime ? new Date(b.lastMessageTime).getTime() : 0;\n\n      // If both have messages, sort by message time\n      if (messageTimeA > 0 && messageTimeB > 0) {\n        return messageTimeB - messageTimeA; // Most recent first\n      }\n\n      // If only one has messages, prioritize the one with messages\n      if (messageTimeA > 0 && messageTimeB === 0) return -1;\n      if (messageTimeA === 0 && messageTimeB > 0) return 1;\n\n      // If neither has messages, sort by creation time\n      const createdAtA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const createdAtB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return createdAtB - createdAtA;\n    });\n  }, [contacts, conversations]);\n\n  // Filter conversations based on search query\n  const filteredConversations = useMemo(() => {\n    console.log('🔍 Filtering conversations:', {\n      searchQuery,\n      allConversations: allConversations.length\n    });\n    if (!searchQuery.trim()) return allConversations;\n    return allConversations.filter(conversation => conversation.name.toLowerCase().includes(searchQuery.toLowerCase()) || conversation.lastMessage && conversation.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [allConversations, searchQuery]);\n  const formatTime = timestamp => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp);\n    return formatDistanceToNow(date, {\n      addSuffix: true\n    });\n  };\n  const getInitials = name => {\n    if (!name) return '?';\n    return name.split(' ').map(word => word.charAt(0)).join('').toUpperCase().slice(0, 2);\n  };\n  const handleAddContact = () => {\n    setIsAddContactModalOpen(true);\n  };\n  const handleContactAdded = newContact => {\n    // Add new contact - it will be sorted by the useMemo logic\n    setContacts(prev => [newContact, ...prev]);\n  };\n  const handleRefreshContacts = () => {\n    smartFetchContacts();\n  };\n\n  // Context menu handlers\n  const handleContextMenu = (e, contact) => {\n    e.preventDefault();\n\n    // Only show context menu if we have a valid contact with required fields\n    if (!contact || !contact.wa_id || !contact.name) {\n      console.error('Invalid contact for context menu:', contact);\n      return;\n    }\n    setContextMenu({\n      isVisible: true,\n      position: {\n        x: e.clientX,\n        y: e.clientY\n      },\n      contact\n    });\n  };\n  const closeContextMenu = () => {\n    setContextMenu({\n      isVisible: false,\n      position: {\n        x: 0,\n        y: 0\n      },\n      contact: null\n    });\n  };\n\n  // Close context menu when clicking outside or pressing Escape\n  useEffect(() => {\n    const handleEscape = e => {\n      if (e.key === 'Escape' && contextMenu.isVisible) {\n        closeContextMenu();\n      }\n    };\n    const handleClickOutside = e => {\n      if (contextMenu.isVisible && !e.target.closest('.context-menu')) {\n        closeContextMenu();\n      }\n    };\n    document.addEventListener('keydown', handleEscape);\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [contextMenu.isVisible]);\n  const handlePinChat = async () => {\n    if (!contextMenu.contact || !contextMenu.contact.wa_id) {\n      console.error('No contact selected for pinning');\n      return;\n    }\n    try {\n      console.log('Toggling pin for contact:', contextMenu.contact.wa_id);\n      const response = await fetch(`/api/contacts/${contextMenu.contact.wa_id}/toggle/pin`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          value: !contextMenu.contact.isPinned\n        })\n      });\n      if (response.ok) {\n        console.log('Contact pin toggled successfully');\n        // Refresh contacts to show updated state\n        smartFetchContacts();\n\n        // Close context menu\n        closeContextMenu();\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Failed to pin/unpin chat:', response.status, errorData);\n        alert(`Failed to pin/unpin chat: ${errorData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error pinning/unpinning chat:', error);\n      alert('Error pinning/unpinning chat. Please try again.');\n    }\n  };\n  const handleDeleteChat = async () => {\n    if (!contextMenu.contact || !contextMenu.contact.wa_id) {\n      console.error('No contact selected for deletion');\n      return;\n    }\n    if (!window.confirm(`Are you sure you want to delete the chat with ${contextMenu.contact.name}? This action cannot be undone.`)) {\n      return;\n    }\n    try {\n      console.log('Deleting contact:', contextMenu.contact.wa_id);\n      const response = await fetch(`/api/contacts/${contextMenu.contact.wa_id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        console.log('Contact deleted successfully');\n        // Refresh contacts to remove deleted contact\n        smartFetchContacts();\n\n        // If the deleted contact was selected, clear the selection\n        if ((selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id) === contextMenu.contact._id) {\n          onConversationSelect(null);\n        }\n\n        // Close context menu\n        closeContextMenu();\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Failed to delete chat:', response.status, errorData);\n        alert(`Failed to delete chat: ${errorData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      console.error('Error deleting chat:', error);\n      alert('Error deleting chat. Please try again.');\n    }\n  };\n  if (loading || contactsLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sidebar ${sidebarOpen ? 'open' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sidebar ${sidebarOpen ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WhatsApp Web\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `refresh-button ${isRefreshing ? 'refreshing' : ''}`,\n          onClick: handleRefreshContacts,\n          title: \"Refresh contacts\",\n          disabled: isRefreshing,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: isRefreshing ? '⟳' : '↻'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-chat-button\",\n          onClick: handleAddContact,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          size: 18,\n          className: \"search-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search or start new chat\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversations-list\",\n      children: filteredConversations.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: searchQuery ? 'No results found' : 'No conversations yet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: searchQuery ? 'Try a different search term' : 'Start chatting to see your conversations here'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this) : filteredConversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `conversation-item ${(selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation._id) === conversation._id ? 'active' : ''} ${conversation.isPinned ? 'pinned' : ''}`,\n        onClick: () => onConversationSelect(conversation),\n        onContextMenu: e => handleContextMenu(e, conversation),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar\",\n          children: getInitials(conversation.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-name\",\n            children: conversation.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-last-message\",\n            children: conversation.lastMessage || 'No messages yet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `conversation-status ${conversation.status === 'offline' ? 'offline' : ''}`,\n            children: conversation.status === 'online' ? 'online' : conversation.status === 'last seen' && conversation.lastSeen ? `last seen ${formatDistanceToNow(new Date(conversation.lastSeen), {\n              addSuffix: true\n            })}` : 'offline'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-time\",\n          children: formatTime(conversation.lastMessageTime || conversation.createdAt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 15\n        }, this), conversation.unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unread-badge\",\n          children: conversation.unreadCount > 9 ? '9+' : conversation.unreadCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 17\n        }, this)]\n      }, conversation._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContactModal, {\n      isOpen: isAddContactModalOpen,\n      onClose: () => setIsAddContactModalOpen(false),\n      onContactAdded: handleContactAdded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n      isVisible: contextMenu.isVisible,\n      position: contextMenu.position,\n      onClose: closeContextMenu,\n      onPinChat: handlePinChat,\n      onDeleteChat: handleDeleteChat,\n      isPinned: ((_contextMenu$contact = contextMenu.contact) === null || _contextMenu$contact === void 0 ? void 0 : _contextMenu$contact.isPinned) || false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"7NpDOSbCPSi8ndZt4SxCepEYPDc=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","formatDistanceToNow","Menu","Search","AddContactModal","ContextMenu","jsxDEV","_jsxDEV","Sidebar","conversations","selectedConversation","onConversationSelect","loading","sidebarOpen","onToggleSidebar","_s","_contextMenu$contact","searchQuery","setSearchQuery","contacts","setContacts","contactsLoading","setContactsLoading","isAddContactModalOpen","setIsAddContactModalOpen","isRefreshing","setIsRefreshing","contextMenu","setContextMenu","isVisible","position","x","y","contact","fetchContacts","response","fetch","ok","data","json","console","log","error","smartFetchContacts","window","refreshContacts","allConversations","length","normalizedContacts","map","_id","wa_id","name","combined","forEach","conv","find","c","push","hasWaId","sort","a","b","isPinned","messageTimeA","lastMessageTime","Date","getTime","messageTimeB","createdAtA","createdAt","createdAtB","filteredConversations","trim","filter","conversation","toLowerCase","includes","lastMessage","formatTime","timestamp","date","addSuffix","getInitials","split","word","charAt","join","toUpperCase","slice","handleAddContact","handleContactAdded","newContact","prev","handleRefreshContacts","handleContextMenu","e","preventDefault","clientX","clientY","closeContextMenu","handleEscape","key","handleClickOutside","target","closest","document","addEventListener","removeEventListener","handlePinChat","method","headers","body","JSON","stringify","value","errorData","catch","status","alert","message","handleDeleteChat","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","disabled","size","type","placeholder","onChange","onContextMenu","lastSeen","unreadCount","isOpen","onClose","onContactAdded","onPinChat","onDeleteChat","_c","$RefreshReg$"],"sources":["D:/WhatsappWebClone/client/src/components/Sidebar.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { Menu, Search } from 'lucide-react';\r\nimport AddContactModal from './AddContactModal';\r\nimport ContextMenu from './ContextMenu';\r\n\r\nconst Sidebar = ({ \r\n  conversations, \r\n  selectedConversation, \r\n  onConversationSelect, \r\n  loading, \r\n  sidebarOpen, \r\n  onToggleSidebar \r\n}) => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [contacts, setContacts] = useState([]);\r\n  const [contactsLoading, setContactsLoading] = useState(true);\r\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const [contextMenu, setContextMenu] = useState({\r\n    isVisible: false,\r\n    position: { x: 0, y: 0 },\r\n    contact: null\r\n  });\r\n\r\n  // Fetch contacts from database\r\n  const fetchContacts = async () => {\r\n    try {\r\n      setContactsLoading(true);\r\n      const response = await fetch('/api/contacts');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('📱 Fetched contacts:', data);\r\n        setContacts(data);\r\n      } else {\r\n        console.error('Failed to fetch contacts');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n    } finally {\r\n      setContactsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Smart fetch contacts with loading state\r\n  const smartFetchContacts = async () => {\r\n    if (isRefreshing) return; // Prevent multiple simultaneous refreshes\r\n    \r\n    try {\r\n      setIsRefreshing(true);\r\n      const response = await fetch('/api/contacts');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('🔄 Contacts refreshed successfully:', data);\r\n        setContacts(data);\r\n      } else {\r\n        console.error('Failed to fetch contacts');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // Fetch contacts on component mount\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  // Expose refresh function globally for other components to use\r\n  useEffect(() => {\r\n    window.refreshContacts = smartFetchContacts;\r\n    \r\n    // Cleanup function to remove the global reference\r\n    return () => {\r\n      delete window.refreshContacts;\r\n    };\r\n  }, []);\r\n\r\n  // No automatic polling - only refresh on events (message sent, manual refresh, initial load)\r\n\r\n  // Combine contacts with fetched conversations and sort by message activity\r\n  const allConversations = useMemo(() => {\r\n    console.log('🔄 Building allConversations:', { contacts: contacts.length, conversations: conversations.length });\r\n    \r\n    // Normalize contacts to ensure they have the correct structure\r\n    const normalizedContacts = contacts.map(contact => {\r\n      // If the contact has _id but no wa_id, use _id as wa_id\r\n      if (contact._id && !contact.wa_id) {\r\n        console.log('🔄 Normalizing contact:', contact.name, 'using _id as wa_id');\r\n        return { ...contact, wa_id: contact._id };\r\n      }\r\n      return contact;\r\n    });\r\n    \r\n    const combined = [...normalizedContacts];\r\n    // Add fetched conversations if they exist and don't duplicate\r\n    conversations.forEach(conv => {\r\n      if (!combined.find(c => c.wa_id === conv.wa_id)) {\r\n        combined.push(conv);\r\n      }\r\n    });\r\n    \r\n    console.log('📱 Combined contacts:', combined.map(c => ({ name: c.name, wa_id: c.wa_id, hasWaId: !!c.wa_id })));\r\n    \r\n    // Sort by pinned status first, then by message activity\r\n    return combined.sort((a, b) => {\r\n      // Pinned chats first\r\n      if (a.isPinned && !b.isPinned) return -1;\r\n      if (!a.isPinned && b.isPinned) return 1;\r\n      \r\n      const messageTimeA = a.lastMessageTime ? new Date(a.lastMessageTime).getTime() : 0;\r\n      const messageTimeB = b.lastMessageTime ? new Date(b.lastMessageTime).getTime() : 0;\r\n      \r\n      // If both have messages, sort by message time\r\n      if (messageTimeA > 0 && messageTimeB > 0) {\r\n        return messageTimeB - messageTimeA; // Most recent first\r\n      }\r\n      \r\n      // If only one has messages, prioritize the one with messages\r\n      if (messageTimeA > 0 && messageTimeB === 0) return -1;\r\n      if (messageTimeA === 0 && messageTimeB > 0) return 1;\r\n      \r\n      // If neither has messages, sort by creation time\r\n      const createdAtA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\r\n      const createdAtB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\r\n      return createdAtB - createdAtA;\r\n    });\r\n  }, [contacts, conversations]);\r\n\r\n  // Filter conversations based on search query\r\n  const filteredConversations = useMemo(() => {\r\n    console.log('🔍 Filtering conversations:', { searchQuery, allConversations: allConversations.length });\r\n    if (!searchQuery.trim()) return allConversations;\r\n    return allConversations.filter(conversation =>\r\n      conversation.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      (conversation.lastMessage && conversation.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()))\r\n    );\r\n  }, [allConversations, searchQuery]);\r\n  const formatTime = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    const date = new Date(timestamp);\r\n    return formatDistanceToNow(date, { addSuffix: true });\r\n  };\r\n\r\n  const getInitials = (name) => {\r\n    if (!name) return '?';\r\n    return name\r\n      .split(' ')\r\n      .map(word => word.charAt(0))\r\n      .join('')\r\n      .toUpperCase()\r\n      .slice(0, 2);\r\n  };\r\n\r\n  const handleAddContact = () => {\r\n    setIsAddContactModalOpen(true);\r\n  };\r\n\r\n  const handleContactAdded = (newContact) => {\r\n    // Add new contact - it will be sorted by the useMemo logic\r\n    setContacts(prev => [newContact, ...prev]);\r\n  };\r\n\r\n  const handleRefreshContacts = () => {\r\n    smartFetchContacts();\r\n  };\r\n\r\n  // Context menu handlers\r\n  const handleContextMenu = (e, contact) => {\r\n    e.preventDefault();\r\n    \r\n    // Only show context menu if we have a valid contact with required fields\r\n    if (!contact || !contact.wa_id || !contact.name) {\r\n      console.error('Invalid contact for context menu:', contact);\r\n      return;\r\n    }\r\n    \r\n    setContextMenu({\r\n      isVisible: true,\r\n      position: { x: e.clientX, y: e.clientY },\r\n      contact\r\n    });\r\n  };\r\n\r\n  const closeContextMenu = () => {\r\n    setContextMenu({\r\n      isVisible: false,\r\n      position: { x: 0, y: 0 },\r\n      contact: null\r\n    });\r\n  };\r\n\r\n  // Close context menu when clicking outside or pressing Escape\r\n  useEffect(() => {\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape' && contextMenu.isVisible) {\r\n        closeContextMenu();\r\n      }\r\n    };\r\n\r\n    const handleClickOutside = (e) => {\r\n      if (contextMenu.isVisible && !e.target.closest('.context-menu')) {\r\n        closeContextMenu();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleEscape);\r\n    document.addEventListener('click', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      document.removeEventListener('click', handleClickOutside);\r\n    };\r\n  }, [contextMenu.isVisible]);\r\n\r\n  const handlePinChat = async () => {\r\n    if (!contextMenu.contact || !contextMenu.contact.wa_id) {\r\n      console.error('No contact selected for pinning');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Toggling pin for contact:', contextMenu.contact.wa_id);\r\n      const response = await fetch(`/api/contacts/${contextMenu.contact.wa_id}/toggle/pin`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          value: !contextMenu.contact.isPinned\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Contact pin toggled successfully');\r\n        // Refresh contacts to show updated state\r\n        smartFetchContacts();\r\n        \r\n        // Close context menu\r\n        closeContextMenu();\r\n      } else {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Failed to pin/unpin chat:', response.status, errorData);\r\n        alert(`Failed to pin/unpin chat: ${errorData.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error pinning/unpinning chat:', error);\r\n      alert('Error pinning/unpinning chat. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteChat = async () => {\r\n    if (!contextMenu.contact || !contextMenu.contact.wa_id) {\r\n      console.error('No contact selected for deletion');\r\n      return;\r\n    }\r\n    \r\n    if (!window.confirm(`Are you sure you want to delete the chat with ${contextMenu.contact.name}? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Deleting contact:', contextMenu.contact.wa_id);\r\n      const response = await fetch(`/api/contacts/${contextMenu.contact.wa_id}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Contact deleted successfully');\r\n        // Refresh contacts to remove deleted contact\r\n        smartFetchContacts();\r\n        \r\n        // If the deleted contact was selected, clear the selection\r\n        if (selectedConversation?._id === contextMenu.contact._id) {\r\n          onConversationSelect(null);\r\n        }\r\n        \r\n        // Close context menu\r\n        closeContextMenu();\r\n      } else {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Failed to delete chat:', response.status, errorData);\r\n        alert(`Failed to delete chat: ${errorData.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting chat:', error);\r\n      alert('Error deleting chat. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading || contactsLoading) {\r\n    return (\r\n      <div className={`sidebar ${sidebarOpen ? 'open' : ''}`}>\r\n        <div className=\"loading-spinner\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`sidebar ${sidebarOpen ? 'open' : ''}`}>\r\n      <div className=\"sidebar-header\">\r\n        <h1>WhatsApp Web</h1>\r\n        <div className=\"header-buttons\">\r\n          <button \r\n            className={`refresh-button ${isRefreshing ? 'refreshing' : ''}`} \r\n            onClick={handleRefreshContacts} \r\n            title=\"Refresh contacts\"\r\n            disabled={isRefreshing}\r\n          >\r\n            <span>{isRefreshing ? '⟳' : '↻'}</span>\r\n          </button>\r\n          <button className=\"new-chat-button\" onClick={handleAddContact}>\r\n            <span>+</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Search Box */}\r\n      <div className=\"search-container\">\r\n        <div className=\"search-box\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search or start new chat\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"conversations-list\">\r\n        {filteredConversations.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <h2>{searchQuery ? 'No results found' : 'No conversations yet'}</h2>\r\n            <p>{searchQuery ? 'Try a different search term' : 'Start chatting to see your conversations here'}</p>\r\n          </div>\r\n        ) : (\r\n          filteredConversations.map((conversation) => (\r\n            <div\r\n              key={conversation._id}\r\n              className={`conversation-item ${\r\n                selectedConversation?._id === conversation._id ? 'active' : ''\r\n              } ${conversation.isPinned ? 'pinned' : ''}`}\r\n              onClick={() => onConversationSelect(conversation)}\r\n              onContextMenu={(e) => handleContextMenu(e, conversation)}\r\n            >\r\n              <div className=\"avatar\">\r\n                {getInitials(conversation.name)}\r\n              </div>\r\n              \r\n                             <div className=\"conversation-info\">\r\n                 <div className=\"conversation-name\">{conversation.name}</div>\r\n                 <div className=\"conversation-last-message\">\r\n                   {conversation.lastMessage || 'No messages yet'}\r\n                 </div>\r\n                 <div className={`conversation-status ${conversation.status === 'offline' ? 'offline' : ''}`}>\r\n                   {conversation.status === 'online' ? 'online' : \r\n                    conversation.status === 'last seen' && conversation.lastSeen ? \r\n                    `last seen ${formatDistanceToNow(new Date(conversation.lastSeen), { addSuffix: true })}` : \r\n                    'offline'}\r\n                 </div>\r\n               </div>\r\n              \r\n              <div className=\"conversation-time\">\r\n                {formatTime(conversation.lastMessageTime || conversation.createdAt)}\r\n              </div>\r\n              \r\n              {conversation.unreadCount > 0 && (\r\n                <div className=\"unread-badge\">\r\n                  {conversation.unreadCount > 9 ? '9+' : conversation.unreadCount}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      \r\n      <AddContactModal\r\n        isOpen={isAddContactModalOpen}\r\n        onClose={() => setIsAddContactModalOpen(false)}\r\n        onContactAdded={handleContactAdded}\r\n      />\r\n      \r\n      <ContextMenu\r\n        isVisible={contextMenu.isVisible}\r\n        position={contextMenu.position}\r\n        onClose={closeContextMenu}\r\n        onPinChat={handlePinChat}\r\n        onDeleteChat={handleDeleteChat}\r\n        isPinned={contextMenu.contact?.isPinned || false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}