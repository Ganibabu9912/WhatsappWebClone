{"ast":null,"code":"import React,{useState,useEffect}from'react';import Sidebar from'./components/Sidebar';import ChatArea from'./components/ChatArea';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedConversation,setSelectedConversation]=useState(null);const[messages,setMessages]=useState([]);const[loading,setLoading]=useState(false);const[sidebarOpen,setSidebarOpen]=useState(false);// Fetch messages when conversation is selected\nuseEffect(()=>{if(selectedConversation){fetchMessages(selectedConversation.wa_id);}},[selectedConversation]);// Expose refreshMessages function globally for status updates\nuseEffect(()=>{window.refreshMessages=()=>{if(selectedConversation){fetchMessages(selectedConversation.wa_id);}};return()=>{delete window.refreshMessages;};},[selectedConversation]);const fetchMessages=async wa_id=>{try{const response=await fetch(\"/api/messages/conversation/\".concat(wa_id));if(response.ok){const data=await response.json();setMessages(data);}else{console.error('Failed to fetch messages');}}catch(error){console.error('Error fetching messages:',error);}};const handleConversationSelect=conversation=>{setSelectedConversation(conversation);setSidebarOpen(false);// Close sidebar on mobile\n};const handleSendMessage=async messageText=>{if(!selectedConversation||!messageText.trim())return;try{const response=await fetch('/api/messages/send',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({wa_id:selectedConversation.wa_id,name:'You',text:messageText.trim()})});if(response.ok){const newMessage=await response.json();setMessages(prev=>[...prev,newMessage]);// Trigger contacts refresh to update sorting\nif(window.refreshContacts){window.refreshContacts();}}else{console.error('Failed to send message');}}catch(error){console.error('Error sending message:',error);}};const toggleSidebar=()=>{setSidebarOpen(!sidebarOpen);};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(Sidebar,{selectedConversation:selectedConversation,onConversationSelect:handleConversationSelect,loading:loading,sidebarOpen:sidebarOpen,onToggleSidebar:toggleSidebar}),/*#__PURE__*/_jsx(ChatArea,{conversation:selectedConversation,messages:messages,onSendMessage:handleSendMessage,onToggleSidebar:toggleSidebar})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatArea","jsx","_jsx","jsxs","_jsxs","App","selectedConversation","setSelectedConversation","messages","setMessages","loading","setLoading","sidebarOpen","setSidebarOpen","fetchMessages","wa_id","window","refreshMessages","response","fetch","concat","ok","data","json","console","error","handleConversationSelect","conversation","handleSendMessage","messageText","trim","method","headers","body","JSON","stringify","name","text","newMessage","prev","refreshContacts","toggleSidebar","className","children","onConversationSelect","onToggleSidebar","onSendMessage"],"sources":["D:/WhatsappWebClone/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatArea from './components/ChatArea';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n\r\n  // Fetch messages when conversation is selected\r\n  useEffect(() => {\r\n    if (selectedConversation) {\r\n      fetchMessages(selectedConversation.wa_id);\r\n    }\r\n  }, [selectedConversation]);\r\n\r\n  // Expose refreshMessages function globally for status updates\r\n  useEffect(() => {\r\n    window.refreshMessages = () => {\r\n      if (selectedConversation) {\r\n        fetchMessages(selectedConversation.wa_id);\r\n      }\r\n    };\r\n    \r\n    return () => {\r\n      delete window.refreshMessages;\r\n    };\r\n  }, [selectedConversation]);\r\n\r\n\r\n\r\n  const fetchMessages = async (wa_id) => {\r\n    try {\r\n      const response = await fetch(`/api/messages/conversation/${wa_id}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setMessages(data);\r\n      } else {\r\n        console.error('Failed to fetch messages');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n    }\r\n  };\r\n\r\n  const handleConversationSelect = (conversation) => {\r\n    setSelectedConversation(conversation);\r\n    setSidebarOpen(false); // Close sidebar on mobile\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!selectedConversation || !messageText.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch('/api/messages/send', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          wa_id: selectedConversation.wa_id,\r\n          name: 'You',\r\n          text: messageText.trim(),\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const newMessage = await response.json();\r\n        setMessages(prev => [...prev, newMessage]);\r\n        \r\n        // Trigger contacts refresh to update sorting\r\n        if (window.refreshContacts) {\r\n          window.refreshContacts();\r\n        }\r\n      } else {\r\n        console.error('Failed to send message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const toggleSidebar = () => {\r\n    setSidebarOpen(!sidebarOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar\r\n        selectedConversation={selectedConversation}\r\n        onConversationSelect={handleConversationSelect}\r\n        loading={loading}\r\n        sidebarOpen={sidebarOpen}\r\n        onToggleSidebar={toggleSidebar}\r\n      />\r\n      <ChatArea\r\n        conversation={selectedConversation}\r\n        messages={messages}\r\n        onSendMessage={handleSendMessage}\r\n        onToggleSidebar={toggleSidebar}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}