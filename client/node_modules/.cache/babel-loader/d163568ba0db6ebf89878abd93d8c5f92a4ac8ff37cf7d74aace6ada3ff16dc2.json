{"ast":null,"code":"import _objectSpread from\"D:/WhatsappWebClone/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useMemo,useEffect}from'react';import{formatDistanceToNow}from'date-fns';import{Menu,Search}from'lucide-react';import AddContactModal from'./AddContactModal';import ContextMenu from'./ContextMenu';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Sidebar=_ref=>{var _contextMenu$contact;let{selectedConversation,onConversationSelect,loading,sidebarOpen,onToggleSidebar}=_ref;const[searchQuery,setSearchQuery]=useState('');const[contacts,setContacts]=useState([]);const[contactsLoading,setContactsLoading]=useState(true);const[isAddContactModalOpen,setIsAddContactModalOpen]=useState(false);const[isRefreshing,setIsRefreshing]=useState(false);const[contextMenu,setContextMenu]=useState({isVisible:false,position:{x:0,y:0},contact:null});// Fetch contacts from database\nconst fetchContacts=async()=>{try{setContactsLoading(true);const response=await fetch('https://whatsappwebclone-ctfp.onrender.com/api/contacts');if(response.ok){const data=await response.json();console.log('📱 Fetched contacts:',data);setContacts(data);}else{console.error('Failed to fetch contacts');}}catch(error){console.error('Error fetching contacts:',error);}finally{setContactsLoading(false);}};// Smart fetch contacts with loading state\nconst smartFetchContacts=async()=>{if(isRefreshing)return;// Prevent multiple simultaneous refreshes\ntry{setIsRefreshing(true);const response=await fetch('https://whatsappwebclone-ctfp.onrender.com/api/contacts');if(response.ok){const data=await response.json();console.log('🔄 Contacts refreshed successfully:',data);setContacts(data);}else{console.error('Failed to fetch contacts');}}catch(error){console.error('Error fetching contacts:',error);}finally{setIsRefreshing(false);}};// Fetch contacts on component mount\nuseEffect(()=>{fetchContacts();},[]);// Expose refresh function globally for other components to use\nuseEffect(()=>{window.refreshContacts=smartFetchContacts;// Cleanup function to remove the global reference\nreturn()=>{delete window.refreshContacts;};},[]);// No automatic polling - only refresh on events (message sent, manual refresh, initial load)\n// Use only contacts data to avoid duplication with conversations from App.js\nconst allConversations=useMemo(()=>{console.log('🔄 Building allConversations from contacts only:',{contacts:contacts.length});// Normalize contacts to ensure they have the correct structure\nconst normalizedContacts=contacts.map(contact=>{// If the contact has _id but no wa_id, use _id as wa_id\nif(contact._id&&!contact.wa_id){console.log('🔄 Normalizing contact:',contact.name,'using _id as wa_id');return _objectSpread(_objectSpread({},contact),{},{wa_id:contact._id});}return contact;});console.log('📱 Normalized contacts:',normalizedContacts.map(c=>({name:c.name,wa_id:c.wa_id,hasWaId:!!c.wa_id})));// Sort by pinned status first, then by message activity\nreturn normalizedContacts.sort((a,b)=>{// Pinned chats first\nif(a.isPinned&&!b.isPinned)return-1;if(!a.isPinned&&b.isPinned)return 1;const messageTimeA=a.lastMessageTime?new Date(a.lastMessageTime).getTime():0;const messageTimeB=b.lastMessageTime?new Date(b.lastMessageTime).getTime():0;// If both have messages, sort by message time\nif(messageTimeA>0&&messageTimeB>0){return messageTimeB-messageTimeA;// Most recent first\n}// If only one has messages, prioritize the one with messages\nif(messageTimeA>0&&messageTimeB===0)return-1;if(messageTimeB>0&&messageTimeA===0)return 1;// If neither has messages, sort by creation time\nconst createdAtA=a.createdAt?new Date(a.createdAt).getTime():0;const createdAtB=b.createdAt?new Date(b.createdAt).getTime():0;return createdAtB-createdAtA;});},[contacts]);// Filter conversations based on search query\nconst filteredConversations=useMemo(()=>{console.log('🔍 Filtering conversations:',{searchQuery,allConversations:allConversations.length});if(!searchQuery.trim())return allConversations;return allConversations.filter(conversation=>conversation.name.toLowerCase().includes(searchQuery.toLowerCase())||conversation.lastMessage&&conversation.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()));},[allConversations,searchQuery]);const formatTime=timestamp=>{if(!timestamp)return'';const date=new Date(timestamp);return formatDistanceToNow(date,{addSuffix:true});};const getInitials=name=>{if(!name)return'?';return name.split(' ').map(word=>word.charAt(0)).join('').toUpperCase().slice(0,2);};const handleAddContact=()=>{setIsAddContactModalOpen(true);};const handleContactAdded=newContact=>{// Add new contact - it will be sorted by the useMemo logic\nsetContacts(prev=>[newContact,...prev]);};const handleRefreshContacts=()=>{smartFetchContacts();};// Context menu handlers\nconst handleContextMenu=(e,contact)=>{e.preventDefault();// Normalize contact to ensure it has wa_id\nlet normalizedContact=contact;if(contact._id&&!contact.wa_id){normalizedContact=_objectSpread(_objectSpread({},contact),{},{wa_id:contact._id});}// Only show context menu if we have a valid contact with required fields\nif(!normalizedContact||!normalizedContact.wa_id||!normalizedContact.name){console.error('Invalid contact for context menu:',normalizedContact);return;}console.log('📱 Opening context menu for:',normalizedContact.name,'wa_id:',normalizedContact.wa_id);setContextMenu({isVisible:true,position:{x:e.clientX,y:e.clientY},contact:normalizedContact});};const closeContextMenu=()=>{setContextMenu({isVisible:false,position:{x:0,y:0},contact:null});};// Close context menu when clicking outside or pressing Escape\nuseEffect(()=>{const handleEscape=e=>{if(e.key==='Escape'&&contextMenu.isVisible){closeContextMenu();}};const handleClickOutside=e=>{if(contextMenu.isVisible&&!e.target.closest('.context-menu')){closeContextMenu();}};document.addEventListener('keydown',handleEscape);document.addEventListener('click',handleClickOutside);return()=>{document.removeEventListener('keydown',handleEscape);document.removeEventListener('click',handleClickOutside);};},[contextMenu.isVisible]);const handlePinChat=async()=>{if(!contextMenu.contact||!contextMenu.contact.wa_id){console.error('No contact selected for pinning');return;}try{console.log('Toggling pin for contact:',contextMenu.contact.wa_id);const response=await fetch(\"https://whatsappwebclone-ctfp.onrender.com/api/contacts/\".concat(contextMenu.contact.wa_id,\"/toggle/pin\"),{method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify({value:!contextMenu.contact.isPinned})});if(response.ok){console.log('Contact pin toggled successfully');// Refresh contacts to show updated state\nsmartFetchContacts();// Close context menu\ncloseContextMenu();}else{const errorData=await response.json().catch(()=>({}));console.error('Failed to pin/unpin chat:',response.status,errorData);alert(\"Failed to pin/unpin chat: \".concat(errorData.message||'Unknown error'));}}catch(error){console.error('Error pinning/unpinning chat:',error);alert('Error pinning/unpinning chat. Please try again.');}};const handleDeleteChat=async()=>{if(!contextMenu.contact||!contextMenu.contact.wa_id){console.error('No contact selected for deletion');return;}if(!window.confirm(\"Are you sure you want to delete the chat with \".concat(contextMenu.contact.name,\"? This action cannot be undone.\"))){return;}try{console.log('Deleting contact:',contextMenu.contact.wa_id);const response=await fetch(\"https://whatsappwebclone-ctfp.onrender.com/api/contacts/\".concat(contextMenu.contact.wa_id),{method:'DELETE'});if(response.ok){console.log('Contact deleted successfully');// Refresh contacts to remove deleted contact\nsmartFetchContacts();// If the deleted contact was selected, clear the selection\nif((selectedConversation===null||selectedConversation===void 0?void 0:selectedConversation._id)===contextMenu.contact._id){onConversationSelect(null);}// Close context menu\ncloseContextMenu();}else{const errorData=await response.json().catch(()=>({}));console.error('Failed to delete chat:',response.status,errorData);alert(\"Failed to delete chat: \".concat(errorData.message||'Unknown error'));}}catch(error){console.error('Error deleting chat:',error);alert('Error deleting chat. Please try again.');}};if(loading||contactsLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"sidebar \".concat(sidebarOpen?'open':''),children:/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\",children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"})})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar \".concat(sidebarOpen?'open':''),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"WhatsApp Web\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"refresh-button \".concat(isRefreshing?'refreshing':''),onClick:handleRefreshContacts,title:\"Refresh contacts\",disabled:isRefreshing,children:/*#__PURE__*/_jsx(\"span\",{children:isRefreshing?'⟳':'↻'})}),/*#__PURE__*/_jsx(\"button\",{className:\"new-chat-button\",onClick:handleAddContact,children:/*#__PURE__*/_jsx(\"span\",{children:\"+\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-box\",children:[/*#__PURE__*/_jsx(Search,{size:18,className:\"search-icon\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search or start new chat\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value),className:\"search-input\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"conversations-list\",children:filteredConversations.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"h2\",{children:searchQuery?'No results found':'No conversations yet'}),/*#__PURE__*/_jsx(\"p\",{children:searchQuery?'Try a different search term':'Start chatting to see your conversations here'})]}):filteredConversations.map(conversation=>/*#__PURE__*/_jsxs(\"div\",{className:\"conversation-item \".concat((selectedConversation===null||selectedConversation===void 0?void 0:selectedConversation._id)===conversation._id?'active':'',\" \").concat(conversation.isPinned?'pinned':''),onClick:()=>onConversationSelect(conversation),onContextMenu:e=>handleContextMenu(e,conversation),children:[/*#__PURE__*/_jsx(\"div\",{className:\"avatar\",children:getInitials(conversation.name)}),/*#__PURE__*/_jsxs(\"div\",{className:\"conversation-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"conversation-name\",children:conversation.name}),/*#__PURE__*/_jsx(\"div\",{className:\"conversation-last-message\",children:conversation.lastMessage||'No messages yet'}),/*#__PURE__*/_jsx(\"div\",{className:\"conversation-status \".concat(conversation.status==='offline'?'offline':''),children:conversation.status==='online'?'online':conversation.status==='last seen'&&conversation.lastSeen?\"last seen \".concat(formatDistanceToNow(new Date(conversation.lastSeen),{addSuffix:true})):'offline'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"conversation-time\",children:formatTime(conversation.lastMessageTime||conversation.createdAt)}),conversation.unreadCount>0&&/*#__PURE__*/_jsx(\"div\",{className:\"unread-badge\",children:conversation.unreadCount>9?'9+':conversation.unreadCount})]},conversation._id))}),/*#__PURE__*/_jsx(AddContactModal,{isOpen:isAddContactModalOpen,onClose:()=>setIsAddContactModalOpen(false),onContactAdded:handleContactAdded}),/*#__PURE__*/_jsx(ContextMenu,{isVisible:contextMenu.isVisible,position:contextMenu.position,onClose:closeContextMenu,onPinChat:handlePinChat,onDeleteChat:handleDeleteChat,isPinned:((_contextMenu$contact=contextMenu.contact)===null||_contextMenu$contact===void 0?void 0:_contextMenu$contact.isPinned)||false})]});};export default Sidebar;","map":{"version":3,"names":["React","useState","useMemo","useEffect","formatDistanceToNow","Menu","Search","AddContactModal","ContextMenu","jsx","_jsx","jsxs","_jsxs","Sidebar","_ref","_contextMenu$contact","selectedConversation","onConversationSelect","loading","sidebarOpen","onToggleSidebar","searchQuery","setSearchQuery","contacts","setContacts","contactsLoading","setContactsLoading","isAddContactModalOpen","setIsAddContactModalOpen","isRefreshing","setIsRefreshing","contextMenu","setContextMenu","isVisible","position","x","y","contact","fetchContacts","response","fetch","ok","data","json","console","log","error","smartFetchContacts","window","refreshContacts","allConversations","length","normalizedContacts","map","_id","wa_id","name","_objectSpread","c","hasWaId","sort","a","b","isPinned","messageTimeA","lastMessageTime","Date","getTime","messageTimeB","createdAtA","createdAt","createdAtB","filteredConversations","trim","filter","conversation","toLowerCase","includes","lastMessage","formatTime","timestamp","date","addSuffix","getInitials","split","word","charAt","join","toUpperCase","slice","handleAddContact","handleContactAdded","newContact","prev","handleRefreshContacts","handleContextMenu","e","preventDefault","normalizedContact","clientX","clientY","closeContextMenu","handleEscape","key","handleClickOutside","target","closest","document","addEventListener","removeEventListener","handlePinChat","concat","method","headers","body","JSON","stringify","value","errorData","catch","status","alert","message","handleDeleteChat","confirm","className","children","onClick","title","disabled","size","type","placeholder","onChange","onContextMenu","lastSeen","unreadCount","isOpen","onClose","onContactAdded","onPinChat","onDeleteChat"],"sources":["D:/WhatsappWebClone/client/src/components/Sidebar.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { Menu, Search } from 'lucide-react';\r\nimport AddContactModal from './AddContactModal';\r\nimport ContextMenu from './ContextMenu';\r\n\r\nconst Sidebar = ({ \r\n  selectedConversation, \r\n  onConversationSelect, \r\n  loading, \r\n  sidebarOpen, \r\n  onToggleSidebar \r\n}) => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [contacts, setContacts] = useState([]);\r\n  const [contactsLoading, setContactsLoading] = useState(true);\r\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const [contextMenu, setContextMenu] = useState({\r\n    isVisible: false,\r\n    position: { x: 0, y: 0 },\r\n    contact: null\r\n  });\r\n\r\n  // Fetch contacts from database\r\n  const fetchContacts = async () => {\r\n    try {\r\n      setContactsLoading(true);\r\n      const response = await fetch('https://whatsappwebclone-ctfp.onrender.com/api/contacts');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('📱 Fetched contacts:', data);\r\n        setContacts(data);\r\n      } else {\r\n        console.error('Failed to fetch contacts');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n    } finally {\r\n      setContactsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Smart fetch contacts with loading state\r\n  const smartFetchContacts = async () => {\r\n    if (isRefreshing) return; // Prevent multiple simultaneous refreshes\r\n    \r\n    try {\r\n      setIsRefreshing(true);\r\n      const response = await fetch('https://whatsappwebclone-ctfp.onrender.com/api/contacts');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('🔄 Contacts refreshed successfully:', data);\r\n        setContacts(data);\r\n      } else {\r\n        console.error('Failed to fetch contacts');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // Fetch contacts on component mount\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  // Expose refresh function globally for other components to use\r\n  useEffect(() => {\r\n    window.refreshContacts = smartFetchContacts;\r\n    \r\n    // Cleanup function to remove the global reference\r\n    return () => {\r\n      delete window.refreshContacts;\r\n    };\r\n  }, []);\r\n\r\n  // No automatic polling - only refresh on events (message sent, manual refresh, initial load)\r\n\r\n  // Use only contacts data to avoid duplication with conversations from App.js\r\n  const allConversations = useMemo(() => {\r\n    console.log('🔄 Building allConversations from contacts only:', { contacts: contacts.length });\r\n    \r\n    // Normalize contacts to ensure they have the correct structure\r\n    const normalizedContacts = contacts.map(contact => {\r\n      // If the contact has _id but no wa_id, use _id as wa_id\r\n      if (contact._id && !contact.wa_id) {\r\n        console.log('🔄 Normalizing contact:', contact.name, 'using _id as wa_id');\r\n        return { ...contact, wa_id: contact._id };\r\n      }\r\n      return contact;\r\n    });\r\n    \r\n    console.log('📱 Normalized contacts:', normalizedContacts.map(c => ({ name: c.name, wa_id: c.wa_id, hasWaId: !!c.wa_id })));\r\n    \r\n    // Sort by pinned status first, then by message activity\r\n    return normalizedContacts.sort((a, b) => {\r\n      // Pinned chats first\r\n      if (a.isPinned && !b.isPinned) return -1;\r\n      if (!a.isPinned && b.isPinned) return 1;\r\n      \r\n      const messageTimeA = a.lastMessageTime ? new Date(a.lastMessageTime).getTime() : 0;\r\n      const messageTimeB = b.lastMessageTime ? new Date(b.lastMessageTime).getTime() : 0;\r\n      \r\n      // If both have messages, sort by message time\r\n      if (messageTimeA > 0 && messageTimeB > 0) {\r\n        return messageTimeB - messageTimeA; // Most recent first\r\n      }\r\n      \r\n      // If only one has messages, prioritize the one with messages\r\n      if (messageTimeA > 0 && messageTimeB === 0) return -1;\r\n      if (messageTimeB > 0 && messageTimeA === 0) return 1;\r\n      \r\n      // If neither has messages, sort by creation time\r\n      const createdAtA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\r\n      const createdAtB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\r\n      return createdAtB - createdAtA;\r\n    });\r\n  }, [contacts]);\r\n\r\n  // Filter conversations based on search query\r\n  const filteredConversations = useMemo(() => {\r\n    console.log('🔍 Filtering conversations:', { searchQuery, allConversations: allConversations.length });\r\n    if (!searchQuery.trim()) return allConversations;\r\n    return allConversations.filter(conversation =>\r\n      conversation.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      (conversation.lastMessage && conversation.lastMessage.toLowerCase().includes(searchQuery.toLowerCase()))\r\n    );\r\n  }, [allConversations, searchQuery]);\r\n  const formatTime = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    const date = new Date(timestamp);\r\n    return formatDistanceToNow(date, { addSuffix: true });\r\n  };\r\n\r\n  const getInitials = (name) => {\r\n    if (!name) return '?';\r\n    return name\r\n      .split(' ')\r\n      .map(word => word.charAt(0))\r\n      .join('')\r\n      .toUpperCase()\r\n      .slice(0, 2);\r\n  };\r\n\r\n  const handleAddContact = () => {\r\n    setIsAddContactModalOpen(true);\r\n  };\r\n\r\n  const handleContactAdded = (newContact) => {\r\n    // Add new contact - it will be sorted by the useMemo logic\r\n    setContacts(prev => [newContact, ...prev]);\r\n  };\r\n\r\n  const handleRefreshContacts = () => {\r\n    smartFetchContacts();\r\n  };\r\n\r\n  // Context menu handlers\r\n  const handleContextMenu = (e, contact) => {\r\n    e.preventDefault();\r\n    \r\n    // Normalize contact to ensure it has wa_id\r\n    let normalizedContact = contact;\r\n    if (contact._id && !contact.wa_id) {\r\n      normalizedContact = { ...contact, wa_id: contact._id };\r\n    }\r\n    \r\n    // Only show context menu if we have a valid contact with required fields\r\n    if (!normalizedContact || !normalizedContact.wa_id || !normalizedContact.name) {\r\n      console.error('Invalid contact for context menu:', normalizedContact);\r\n      return;\r\n    }\r\n    \r\n    console.log('📱 Opening context menu for:', normalizedContact.name, 'wa_id:', normalizedContact.wa_id);\r\n    \r\n    setContextMenu({\r\n      isVisible: true,\r\n      position: { x: e.clientX, y: e.clientY },\r\n      contact: normalizedContact\r\n    });\r\n  };\r\n\r\n  const closeContextMenu = () => {\r\n    setContextMenu({\r\n      isVisible: false,\r\n      position: { x: 0, y: 0 },\r\n      contact: null\r\n    });\r\n  };\r\n\r\n  // Close context menu when clicking outside or pressing Escape\r\n  useEffect(() => {\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape' && contextMenu.isVisible) {\r\n        closeContextMenu();\r\n      }\r\n    };\r\n\r\n    const handleClickOutside = (e) => {\r\n      if (contextMenu.isVisible && !e.target.closest('.context-menu')) {\r\n        closeContextMenu();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleEscape);\r\n    document.addEventListener('click', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      document.removeEventListener('click', handleClickOutside);\r\n    };\r\n  }, [contextMenu.isVisible]);\r\n\r\n  const handlePinChat = async () => {\r\n    if (!contextMenu.contact || !contextMenu.contact.wa_id) {\r\n      console.error('No contact selected for pinning');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Toggling pin for contact:', contextMenu.contact.wa_id);\r\n      const response = await fetch(`https://whatsappwebclone-ctfp.onrender.com/api/contacts/${contextMenu.contact.wa_id}/toggle/pin`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          value: !contextMenu.contact.isPinned\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Contact pin toggled successfully');\r\n        // Refresh contacts to show updated state\r\n        smartFetchContacts();\r\n        \r\n        // Close context menu\r\n        closeContextMenu();\r\n      } else {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Failed to pin/unpin chat:', response.status, errorData);\r\n        alert(`Failed to pin/unpin chat: ${errorData.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error pinning/unpinning chat:', error);\r\n      alert('Error pinning/unpinning chat. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteChat = async () => {\r\n    if (!contextMenu.contact || !contextMenu.contact.wa_id) {\r\n      console.error('No contact selected for deletion');\r\n      return;\r\n    }\r\n    \r\n    if (!window.confirm(`Are you sure you want to delete the chat with ${contextMenu.contact.name}? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Deleting contact:', contextMenu.contact.wa_id);\r\n      const response = await fetch(`https://whatsappwebclone-ctfp.onrender.com/api/contacts/${contextMenu.contact.wa_id}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Contact deleted successfully');\r\n        // Refresh contacts to remove deleted contact\r\n        smartFetchContacts();\r\n        \r\n        // If the deleted contact was selected, clear the selection\r\n        if (selectedConversation?._id === contextMenu.contact._id) {\r\n          onConversationSelect(null);\r\n        }\r\n        \r\n        // Close context menu\r\n        closeContextMenu();\r\n      } else {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        console.error('Failed to delete chat:', response.status, errorData);\r\n        alert(`Failed to delete chat: ${errorData.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting chat:', error);\r\n      alert('Error deleting chat. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading || contactsLoading) {\r\n    return (\r\n      <div className={`sidebar ${sidebarOpen ? 'open' : ''}`}>\r\n        <div className=\"loading-spinner\">\r\n          <div className=\"spinner\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`sidebar ${sidebarOpen ? 'open' : ''}`}>\r\n      <div className=\"sidebar-header\">\r\n        <h1>WhatsApp Web</h1>\r\n        <div className=\"header-buttons\">\r\n          <button \r\n            className={`refresh-button ${isRefreshing ? 'refreshing' : ''}`} \r\n            onClick={handleRefreshContacts} \r\n            title=\"Refresh contacts\"\r\n            disabled={isRefreshing}\r\n          >\r\n            <span>{isRefreshing ? '⟳' : '↻'}</span>\r\n          </button>\r\n          <button className=\"new-chat-button\" onClick={handleAddContact}>\r\n            <span>+</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Search Box */}\r\n      <div className=\"search-container\">\r\n        <div className=\"search-box\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search or start new chat\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"conversations-list\">\r\n        {filteredConversations.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <h2>{searchQuery ? 'No results found' : 'No conversations yet'}</h2>\r\n            <p>{searchQuery ? 'Try a different search term' : 'Start chatting to see your conversations here'}</p>\r\n          </div>\r\n        ) : (\r\n          filteredConversations.map((conversation) => (\r\n            <div\r\n              key={conversation._id}\r\n              className={`conversation-item ${\r\n                selectedConversation?._id === conversation._id ? 'active' : ''\r\n              } ${conversation.isPinned ? 'pinned' : ''}`}\r\n              onClick={() => onConversationSelect(conversation)}\r\n              onContextMenu={(e) => handleContextMenu(e, conversation)}\r\n            >\r\n              <div className=\"avatar\">\r\n                {getInitials(conversation.name)}\r\n              </div>\r\n              \r\n                             <div className=\"conversation-info\">\r\n                 <div className=\"conversation-name\">{conversation.name}</div>\r\n                 <div className=\"conversation-last-message\">\r\n                   {conversation.lastMessage || 'No messages yet'}\r\n                 </div>\r\n                 <div className={`conversation-status ${conversation.status === 'offline' ? 'offline' : ''}`}>\r\n                   {conversation.status === 'online' ? 'online' : \r\n                    conversation.status === 'last seen' && conversation.lastSeen ? \r\n                    `last seen ${formatDistanceToNow(new Date(conversation.lastSeen), { addSuffix: true })}` : \r\n                    'offline'}\r\n                 </div>\r\n               </div>\r\n              \r\n              <div className=\"conversation-time\">\r\n                {formatTime(conversation.lastMessageTime || conversation.createdAt)}\r\n              </div>\r\n              \r\n              {conversation.unreadCount > 0 && (\r\n                <div className=\"unread-badge\">\r\n                  {conversation.unreadCount > 9 ? '9+' : conversation.unreadCount}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      \r\n      <AddContactModal\r\n        isOpen={isAddContactModalOpen}\r\n        onClose={() => setIsAddContactModalOpen(false)}\r\n        onContactAdded={handleContactAdded}\r\n      />\r\n      \r\n      <ContextMenu\r\n        isVisible={contextMenu.isVisible}\r\n        position={contextMenu.position}\r\n        onClose={closeContextMenu}\r\n        onPinChat={handlePinChat}\r\n        onDeleteChat={handleDeleteChat}\r\n        isPinned={contextMenu.contact?.isPinned || false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}