{"ast":null,"code":"var _jsxFileName = \"D:\\\\WhatsappWebClone\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './components/Sidebar';\nimport ChatArea from './components/ChatArea';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  // Fetch conversations on component mount\n  useEffect(() => {\n    fetchConversations();\n  }, []);\n\n  // Fetch messages when conversation is selected\n  useEffect(() => {\n    if (selectedConversation) {\n      fetchMessages(selectedConversation.wa_id);\n    }\n  }, [selectedConversation]);\n  const fetchConversations = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/messages/conversations');\n      if (response.ok) {\n        const data = await response.json();\n        setConversations(data);\n      } else {\n        console.error('Failed to fetch conversations');\n      }\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchMessages = async wa_id => {\n    try {\n      const response = await fetch(`/api/messages/conversation/${wa_id}`);\n      if (response.ok) {\n        const data = await response.json();\n        setMessages(data);\n      } else {\n        console.error('Failed to fetch messages');\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleConversationSelect = conversation => {\n    setSelectedConversation(conversation);\n    setSidebarOpen(false); // Close sidebar on mobile\n  };\n  const handleSendMessage = async messageText => {\n    if (!selectedConversation || !messageText.trim()) return;\n    try {\n      const response = await fetch('/api/messages/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          wa_id: selectedConversation.wa_id,\n          name: 'You',\n          text: messageText.trim()\n        })\n      });\n      if (response.ok) {\n        const newMessage = await response.json();\n        setMessages(prev => [...prev, newMessage]);\n\n        // Update conversation's last message\n        setConversations(prev => prev.map(conv => conv.wa_id === selectedConversation.wa_id ? {\n          ...conv,\n          lastMessage: messageText.trim(),\n          lastMessageTime: new Date()\n        } : conv));\n\n        // Trigger contacts refresh to update sorting\n        if (window.refreshContacts) {\n          window.refreshContacts();\n        }\n      } else {\n        console.error('Failed to send message');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      selectedConversation: selectedConversation,\n      onConversationSelect: handleConversationSelect,\n      loading: loading,\n      sidebarOpen: sidebarOpen,\n      onToggleSidebar: toggleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n      conversation: selectedConversation,\n      messages: messages,\n      onSendMessage: handleSendMessage,\n      onToggleSidebar: toggleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3DrSvxe4VYrhXrxtJFsel8W7RQE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatArea","jsxDEV","_jsxDEV","App","_s","conversations","setConversations","selectedConversation","setSelectedConversation","messages","setMessages","loading","setLoading","sidebarOpen","setSidebarOpen","fetchConversations","fetchMessages","wa_id","response","fetch","ok","data","json","console","error","handleConversationSelect","conversation","handleSendMessage","messageText","trim","method","headers","body","JSON","stringify","name","text","newMessage","prev","map","conv","lastMessage","lastMessageTime","Date","window","refreshContacts","toggleSidebar","className","children","onConversationSelect","onToggleSidebar","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["D:/WhatsappWebClone/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatArea from './components/ChatArea';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n\r\n  // Fetch conversations on component mount\r\n  useEffect(() => {\r\n    fetchConversations();\r\n  }, []);\r\n\r\n  // Fetch messages when conversation is selected\r\n  useEffect(() => {\r\n    if (selectedConversation) {\r\n      fetchMessages(selectedConversation.wa_id);\r\n    }\r\n  }, [selectedConversation]);\r\n\r\n  const fetchConversations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/messages/conversations');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setConversations(data);\r\n      } else {\r\n        console.error('Failed to fetch conversations');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching conversations:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async (wa_id) => {\r\n    try {\r\n      const response = await fetch(`/api/messages/conversation/${wa_id}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setMessages(data);\r\n      } else {\r\n        console.error('Failed to fetch messages');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n    }\r\n  };\r\n\r\n  const handleConversationSelect = (conversation) => {\r\n    setSelectedConversation(conversation);\r\n    setSidebarOpen(false); // Close sidebar on mobile\r\n  };\r\n\r\n  const handleSendMessage = async (messageText) => {\r\n    if (!selectedConversation || !messageText.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch('/api/messages/send', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          wa_id: selectedConversation.wa_id,\r\n          name: 'You',\r\n          text: messageText.trim(),\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const newMessage = await response.json();\r\n        setMessages(prev => [...prev, newMessage]);\r\n        \r\n        // Update conversation's last message\r\n        setConversations(prev => \r\n          prev.map(conv => \r\n            conv.wa_id === selectedConversation.wa_id \r\n              ? { ...conv, lastMessage: messageText.trim(), lastMessageTime: new Date() }\r\n              : conv\r\n          )\r\n        );\r\n        \r\n        // Trigger contacts refresh to update sorting\r\n        if (window.refreshContacts) {\r\n          window.refreshContacts();\r\n        }\r\n      } else {\r\n        console.error('Failed to send message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const toggleSidebar = () => {\r\n    setSidebarOpen(!sidebarOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar\r\n        selectedConversation={selectedConversation}\r\n        onConversationSelect={handleConversationSelect}\r\n        loading={loading}\r\n        sidebarOpen={sidebarOpen}\r\n        onToggleSidebar={toggleSidebar}\r\n      />\r\n      <ChatArea\r\n        conversation={selectedConversation}\r\n        messages={messages}\r\n        onSendMessage={handleSendMessage}\r\n        onToggleSidebar={toggleSidebar}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}